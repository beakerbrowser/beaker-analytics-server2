#!/usr/bin/env node

/**
 * Module dependencies.
 */

var createApp = require('../app');
var http = require('http');

var server
var app
var port
main()

async function main () {
  try {
    app = await createApp()
  } catch (e) {
    console.error('Fatal error during setup:', e)
    process.exit(1)
  }

  port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

}

function normalizePort(val) {
  val = parseInt(val, 10);

  if (isNaN(val)) {
    // named pipe
    return val;
  }

  if (val >= 0) {
    return val;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}